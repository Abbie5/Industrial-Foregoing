buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    configurations {
        classpath.resolutionStrategy {
            cacheDynamicVersionsFor 10, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.1.0"
        //classpath 'com.selesse:gradle-git-changelog:0.2.+'
    }
}
plugins {
    id "com.github.hierynomus.license" version "0.14.0"
    id 'java'
    id "com.matthewprenger.cursegradle" version "1.1.0"
}
//apply plugin: 'com.selesse.git.changelog'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

def BUILD_NUMBER = System.getenv("BUILD_NUMBER") ?: "0"
version = "${mod_version}.$BUILD_NUMBER"
group = "com.buuz135"
archivesBaseName = "industrial-foregoing"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    mappings channel: 'snapshot', version: '20180921-1.13'
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://cdn.hrzn.studio/maven/'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.216'
    compile fg.deobf('com.hrznstudio:titanium:2.1.26')
    compileOnly 'org.projectlombok:lombok:1.16.16'
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
}

afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', '1.13'

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion': '1.13'
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }
}

task apiJar(type: Jar, dependsOn: 'classes') {
    classifier = 'api'
    from(sourceSets.main.output) {
        include 'com/buuz135/industrial/api/**'
    }
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }
    extension = 'jar'
    classifier = 'deobf'
}

artifacts {
    archives devJar
    archives apiJar
}

tasks.curseforge.enabled =  project.hasProperty('curse_api')

curseforge {
    if (project.hasProperty('curse_api')) {
        apiKey = project.curse_api
    }
    project {
        id = '266515'
        changelog = file('CHANGELOG.md')
        changelogType = 'markdown'
        releaseType = 'alpha'

        mainArtifact(jar){
            relations {
                requiredLibrary 'titanium'
            }
        }
        
        addArtifact apiJar
        addArtifact devJar
    }
}

license {
    header rootProject.file('HEADER')
    include "**/*.java"
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Buuz135'
    ignoreFailures = true
    mapping {
        java='SLASHSTAR_STYLE'
    }
}

//changelog {
//    title = "Industrial Foregoing"
//    fileName = "CHANGELOG.md"
//    outputDirectory = file("$projectDir")
//    
//    commitFormat = '%s (%an)'
//    markdown {
//        commitFormat = '* %s (%an)'
//    }
//    includeLines = {
//        !it.contains("Merge")
//    }
//    processLines = {
//        String input = it as String
//        if (input.contains('[ci skip] ')) {
//            input = input.minus('[ci skip] ')
//        }
//        input
//    }
//}